A tree is an abstract data type that stores elements hierarchically. With the exception of the top element, each element in a tree has
a parent element and zero or more children elements. for tree T parent-child relationship that satisfies the following properties:

• If T is nonempty, it has a special node, called the root of T, that has no parent.
• Each node v of T different from the root has a unique parent node w; every node with parent w is a child of w.

Two nodes that are children of the same parent are siblings.
A node v is external if v has no children. External nodes are also known as leaves.
A node v is internal if it has one or more children.

Edge: An edge of tree T is a pair of nodes (u,v) such that u is the parent of v, or vice versa.

Path: A path of T is a sequence of nodes such that any two consecutive nodes in the sequence form an edge.

Ordered Trees: A tree is ordered if there is a meaningful linear order among the children of each node; eg: family tree represented age 
wise


The Tree Abstract Data Type:

we define a tree ADT using the concept of a position as an abstraction for a node of a tree. An element is stored at each position, and 
positions satisfy parent-child relationships that define the tree structure. A position object for a tree supports the method:

p.element()       : Return the element stored at position p.
#accessor methods
T.root()          : Return the position of the root of tree T,or None if T is empty.
T.is_root(p)      : Return True if position p is the root of Tree T.
T.parent(p)       : Return the position of the parent of position p, or None if p is the root of T.
T.num children(p) : Return the number of children of position p.
T.children(p)     : Generate an iteration of the children of position p.
T.is leaf(p)      : Return True if position p does not have any children.
len(T)            : Return the number of positions (and hence elements) that are contained in tree T.
T.is_empty()      : Return True if tree T does not contain any positions.
T.positions()     : Generate an iteration of all positions of tree T.
iter(T)           : Generate an iteration of all elements stored within tree T.

Tree class does not define any internal representation for storing a tree, and five of the methods given in that code fragment remain 
abstract (root, parent, num children, children, and len ); each of these methods raises a NotImplementedError.
The subclasses are responsible for overriding abstract methods, such as children, to provide a working implementation for each behavior,
based on their chosen internal representation.
Although it's a abstract base class, it includes several concrete methods with implementations that rely on calls to the abstract 
methods of the class.(is_root, is_leaf and is_empty.)
We note that, with the Tree class being abstract, there is no reason to create a direct instance of it, nor would such an instance be 
useful. The class exists to serve as a base for inheritance, and users will create instances of concrete subclasses.

#see the code


depth of p  : number of ancestors of p, excluding p itself. so depth of the root will be 0. recursively  defined;
            • If p is the root, then the depth of p is 0.
            • Otherwise, the depth of p is one plus the depth of the parent of p.

def depth(self, p):
  """Return the number of levels separating Position p from the root"""
  if self.is root(p):
    return 0
  else:
    return 1 + self.depth(self.parent(p))
    
The running time of T.depth(p) for position p is O(dp +1), where dp denotes the depth of p in the tree T,

because the algorithm performs a constant-time recursive step for each ancestor of p. Thus, algorithm T.depth(p) runs in O(n) worstcase
time, where n is the total number of positions of T, because a position of T may have depth n−1 if all nodes form a single branch.

Height Of P : The height of a position p in a tree T is also defined recursively:
            • If p is a leaf, then the height of p is 0.
            • Otherwise, the height of p is one more than the maximum of the heights of p’s children.

The height of a nonempty tree T is the height of the root of T.
**The height of a nonempty tree T is equal to the maximum of the depths of its leaf positions.
 on the basis of above proposition the height of nonempty tree will be
 
 def _height1(self):
      return max(self.depth(p) for p in self.positions() if self.is_leaf(p))
      
 Complexitity : O(nˆ2) worst-case time
 
 to get the height in O(n):
 
def height2(self, p): # time is linear in size of subtree
    """Return the height of the subtree rooted at Position p"""
  if self.is leaf(p):
    return 0
  else:
    return 1 + max(self. height2(c) for c in self.children(p))

public height function:

 def height(self, p=None):
 """Return the height of the subtree rooted at Position p.

   If p is None, return the height of the entire tree."""
   if p is None:
    p = self.root( )
    return self. height2(p)
    
    
**Binary Trees**

A binary tree is an ordered tree with the following properties:
  1. Every node has at most two children.
  2. Each child node is labeled as being either a left child or a right child.
  3. A left child precedes a right child in the order of children of a node.

Proper BT/Full BT: In a proper binary tree, every internal node has either zero or two children..
A binary tree that is not proper is improper.

Defining Binary Tree using recursion:

  • A node r, called the root of T, that stores an element
  • A binary tree (possibly empty), called the left subtree of T
  • A binary tree (possibly empty), called the right subtree of T

Binary tree ADT:
binary tree is a specialization of a tree that supports three additional accessor methods:

T.left(p)     : Return the position that represents the left child of p, or None if p has no left child.
T.right(p)    : Return the position that represents the right child of p, or None if p has no right child.
T.sibling(p)  : Return the position that represents the sibling of p,or None if p has no sibling.

#see the code

* Properties of Binary Trees: level d has at most 2d nodes.
  
* In a non empty Proper binary tree : with nE external nodes and nI internal nodes, we have nE = nI +1

Implementing Trees: 

Linked Structure Binary Trees(BT implemente using LL): 

Update methods for linked binary tree:

T.add root(e)       : Create a root for an empty tree, storing e as the element, and return the position of that root; an error occurs 
                      if the tree is not empty.
T.add left(p, e)    : Create a new node storing element e, link the node as the left child of position p, and return the resulting 
                      position; an error occurs if p already has a left child.
T.add right(p, e)   : Create a new node storing element e, link the node as the right child of position p, and return the resulting 
                      position; an error occurs if p already has a right child.
T.replace(p, e)     : Replace the element stored at position p with element e,and return the previously stored element.
T.delete(p)         : Remove the node at position p, replacing it with its child, if any, and return the element that had been stored 
                      at p; an error occurs if p has two children.
T.attach(p, T1, T2) : Attach the internal structure of trees T1 and T2, respectively, as the left and right subtrees of leaf position 
                      p of T, and reset T1 and T2 to empty trees; an error condition occurs if p is not a leaf.

 *performance of the linked structure bianry tree
 
Operation                                                               Running Time
len, is_empty                                                           O(1)
root, parent, left, right, sibling, children, num children              O(1)
is root, is_leaf                                                        O(1)
depth(p)                                                                O(dp+1)
height                                                                  O(n)
add_root, add_left, add_right, replace, delete, attach                  O(1)

*Array-Based Representation of a Binary Tree:

See the code

An alternative representation of a binary tree T is based on a way of numbering the positions of T. For every position p of T, let 
f (p) be the integer defined as follows.
  • If p is the root of T, then f (p) = 0.
  • If p is the left child of position q, then f (p) = 2 f (q)+1.
  • If p is the right child of position q, then f (p) = 2 f (q)+2.
  • parent of p has index = (f(p)−1)/2
 
  
  
The numbering function f is known as a level numbering of the positions in a binary tree T, for it numbers the positions on each level 
of T in increasing order from left to right. If some node have no children even then also numbring function will assume that their 
are children and do the numbering of next nodes accroding to that.

Binary tree will be saved in the list where position will be represented by the index and values of the node will be saved at that index

The space usage of an array-based representation depends greatly on the shape of the tree. Let n be the number of nodes of T, and let 
fM be the maximum value of f (p) over all the nodes of T. The array A requires length N = 1+ fM, since elements range from A[0] to 
A[ fM]. Note that A may have a number of empty cells that do not refer to existing nodes of T. In fact, in the worst case, N = 2n −1.

A class of binary trees, called “heaps” for which N = n. Thus, in spite of the worst-case space usage, there are applications for which
the array representation of a binary tree is space efficient. 
Still, for general binary trees, the exponential worst-case space requirement of this representation is prohibitive.

Another drawback of an array representation is that some update operations for trees cannot be efficiently supported. 
For example, deleting a node and promoting its child takes O(n) time because it is not just the child that moves locations within
the array, but all descendants of that child.


***Linked Structure for General Trees:

For a general tree, there is no a priori limit on the number of children that a node may have. A natural way to realize a general tree 
T as a linked structure is to have each node store a single container of references to its children.

Operation                     Running Time
len, is_empty                 : O(1)
root, parent, is_root,is_leaf : O(1)
children(p)                   : O(cp +1)
depth(p)                      : O(dp +1)
height                        : O(n)

 **************************************************Tree Traversal Algorithms************************************************************
 
A traversal of a tree T is a systematic way of accessing, or “visiting,” all the positions of T.

** pre-post order traversal

*preorder traversal : In a preorder traversal of a tree T, the root of T is visited first and then the subtrees
rooted at its children are traversed recursively.

Algorithm preorder(T, p):
  perform the “visit” action for position p
  for each child c in T.children(p) do
    preorder(T, c)

*Postorder Traversal: it recursively traverses the subtrees rooted at the children of the root first, and then visits the root

Algorithm postorder(T, p):
 for each child c in T.children(p) do
    postorder(T, c) {recursively traverse the subtree rooted at c}
 perform the “visit” action for position p


Running-Time Analysis:

At each position p, the nonrecursive part of the traversal algorithm requires time O(cp+1), where cp is the number of children of p, 
under the assumption that the “visit” itself takes O(1) time. By Proposition 8.5, the overall running time for the traversal of tree T 
is O(n), where n is the number of positions in the tree. This running time is asymptotically optimal since the traversal must visit all 
the n positions of the tree.

**Breadth-First Tree Traversal:

another common approach is to traverse a tree so that we visit all the positions at depth d before we visit the positions at depth d +1.
Such an algorithm is known as a breadth-first traversal.

The process is not recursive, since we are not traversing entire subtrees at once. We use a queue to produce a FIFO (i.e., first-in 
first-out) semantics for the order in which we visit nodes. The overall running time is O(n), due to the n calls to enqueue and n calls
to dequeue.

Algorithm breadthfirst(T):
 Initialize queue Q to contain T.root( )
 while Q not empty do
  p = Q.dequeue( ) {p is the oldest entry in the queue}
  perform the “visit” action for position p
  for each child c in T.children(p) do
   Q.enqueue(c) {add p’s children to the end of the queue for later visits}

**Inorder Traversal of a Binary Tree: This traversal is specifically for a binary tree.

we visit a position between the recursive traversals of its left and right subtrees.

Algorithm inorder(p):
            if p has a left child lc then
               inorder(lc)                      {recursively traverse the left subtree of p}
               
            perform the “visit” action for position p
            
            if p has a right child rc then
               inorder(rc)                       {recursively traverse the right subtree of p}

When using a binary tree to represent an arithmetic expression, the inorder traversal visits positions in a 
consistent order with the standard representation of the expression

*************************************************** Binary Search Tree ***************************************************************
A binary search tree for S is a binary tree T such that, for each position p of T:
• Position p stores an element of S, denoted as e(p).
• Elements stored in the left subtree of p (if any) are less than e(p).
• Elements stored in the right subtree of p (if any) are greater than e(p).

