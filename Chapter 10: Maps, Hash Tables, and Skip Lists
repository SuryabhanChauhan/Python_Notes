
---------------------------10.1.2 Application: Counting Word Frequencies ------------------------

problem of counting the number of occurrences of words in a document. using dictionary

#see the code

---------------------------- 10.1.3 Python’s MutableMapping Abstract Base Class ----------------------------------

The collections module provides two abstract base classes that are relevant to
our current discussion: the Mapping and MutableMapping classes. The Mapping
class includes all nonmutating methods supported by Python’s dict class, while the
MutableMapping class extends that to include the mutating methods. What we
define as the map ADT in Section 10.1.1 is akin to the MutableMapping abstract
base class in Python’s collections module.

In particular, the MutableMapping
class provides concrete implementations for all behaviors other than the first five
outlined in Section 10.1.1: __getitem__ , __setitem__ , __delitem__ , __len__ , and
__iter__ . As we implement the map abstraction with various data structures, as
long as we provide the five core behaviors, we can inherit all other derived behaviors
by simply declaring MutableMapping as a parent class.
  
To better understand the MutableMapping class, we provide a few examples of
how concrete behaviors can be derived from the five core abstractions. For example,
the contains method, supporting the syntax k in M, could be implemented by
making a guarded attempt to retrieve self[k] to determine if the key exists.
def __contains__(self, k):
  try:
    self[k] # access via getitem (ignore result)
    return True
  except KeyError:
    return False # attempt failed
    
A similar approach might be used to provide the logic of the setdefault method.
def setdefault(self, k, d):
  try:
    return self[k] # if getitem succeeds, return value
  except KeyError: # otherwise:
    self[k] = d # set default value with setitem
    return d # and return that newly assigned value
