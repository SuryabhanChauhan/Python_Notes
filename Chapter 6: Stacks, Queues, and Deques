**Stacks** :
stack is an abstract
data type (ADT) such that an instance S supports the following two methods
A stack is a collection of objects that are inserted and removed according to the last-in, first-out (LIFO) principle.

ex: browser saving recently visited sites.
    text editors for undo functionality depend upon stack
    
stack is an abstract data type (ADT) such that an instance S supports the following two methods:

S.push(e) : Add element e to the top of stack S.
S.pop()   : Remove and return the top element from the stack S; an error occurs if the stack is empty.

accessor methods:
S.top()       : Return a reference to the top element of stack S, without removing it; an error occurs if the stack is empty.
S.is empty( ) : Return True if stack S does not contain any elements. len(S): Return the number of elements in stack S; in Python, we
                implement this with the special method len.
                
*Simple Array-Based Stack Implementation*:
Programmer can directly use list for the stack but that would break the abstraction that the stack ADT represents.
Also, the terminology used by the list class does not precisely align with traditional nomenclature for a stack ADT, 
like list use append while stakc use push.

*we will use list for internal storage while providing a public interface consistent with a stack.

The Adapter Pattern: 
The adapter design pattern applies to any context where we effectively want to modify an existing class so that its methods match those 
of a related, but different, class or interface.

In stack ADT we will be adpting list class:
stack method  Realization with Python list
S.push(e)       L.append(e)
S.pop( )        L.pop( )
S.top()         L[−1]
S.is empty( )   len(L) == 0
len(S)          len(L)

first creating a new exception class,as we want to raise differnt error for the stack. this class will be a sub class of exception class

class Empty(Exception):
'''Error attempting to access an element from an empty container.'''
  pass
  
Analysis:

Operation Running Time
S.push(e)     O(1)∗
S.pop()       O(1)∗
S.top()       O(1)
S.is empty()  O(1)
len(S)        O(1)
∗amortized

space complexity: O(n)

*As an alternate model for a stack, we might wish for the constructor to accept a parameter specifying the maximum capacity of a stack
and to initialize the data member to a list of that length.

stack uses:

1. Reversing Data Using a Stack: Stack can be used as a general tool to reverse a data sequence.
ex: we might wish to print lines of a file in reverse order in order to display a data set in decreasing order rather than increasing 
order

One technical detail worth noting is that we intentionally strip trailing newlines from lines as they are read, and then re-insert 
newlines after each line when writing the resulting file. Our reason for doing this is to handle a special case in which the original
file does not have a trailing newline for the final line.

2. Matching Delimiters in program: complexity O(n)

3. Matching Tags in a Markup Language : complexity O(n)


**QUEUES**:

Queue is a collection of objects that are inserted and removed according to the first-in, first-out (FIFO) principle.
used in call centers, networked printer, or a Web server responding to requests.

Formally, the queue abstract data type defines a collection that keeps objects in a sequence, where element access and deletion are 
restricted to the first element inthe queue, and element insertion is restricted to the back of the sequence.

The queue abstract data type (ADT) supports the following two fundamental methods for a queue Q:

Q.enqueue(e): Add element e to the back of queue Q.
Q.dequeue(): Remove and return the first element from queue Q; an error occurs if the queue is empty.

supporting methods:
Q.first()    : Return a reference to the element at the front of queue Q, without removing it; an error occurs if the queue is empty.
Q.is empty() : Return True if queue Q does not contain any elements.
len(Q)       : Return the number of elements in queue Q; in Python,we implement this with the special method len.

 
Array-Based Queue Implementation:

It may be very tempting to use a similar approach like stack for supporting the queue ADT. We could enqueue element e by calling 
append(e) to add it to the end of the list. We could use the syntax pop(0), as opposed to pop( ), to intentionally remove the first 
element from the list when dequeuing.
but it's not efficient becasue every time while dequeueing we have to pop the element from zero index which will lead to O(n) complexity
as we need to shift the other values to the left.

To avoid the pop(0), We can replace the dequeued entry in the array with a reference to None, andmaintain an explicit variable f to 
store the index of the element that is currently at the front of the queue. Such an algorithm for dequeue would run in O(1) time.

But, if we repeatedly enqueue a new element and then dequeue another (allowing thefront to drift rightward). Over time, the size of the
underlying list would grow to O(m) where m is the total number of enqueue operations since the creation of the queue, rather than the 
current number of elements in the queue.

In developing a more robust queue implementation, we allow the front of the queue to drift rightward, and we allow the contents of the 
queue to “wrap around” the end of an underlying array.
this we will acheive by defining a default size list in the start and then doubling the size of the underlying list whenever the 
existing list is full.

A more robust approach will be to reduce the array to half of its current size, whenever the number of elements stored in it falls below one 
fourth of its capacity.

Garbage Collection:
The process by which Python periodically frees and reclaims blocks of memory that no longer are in use is called Garbage Collection.


Operation       Running Time
Q.enqueue(e)    O(1)∗
Q.dequeue( )    O(1)∗
Q.first()       O(1)
Q.is empty( )   O(1)
len(Q)          O(1)

**Double-Ended Queues**
Queue-like data structure that supports insertion and deletion at both the front and the back of the queue. 
Such a structure is called a double ended queue, or deque, which is usually pronounced “deck”.
 
supports the following methods:
D.add_first(e)      : Add element e to the front of deque D.
D.add_last(e)       : Add element e to the back of deque D.
D.delete_first()    : Remove and return the first element from deque D; an error occurs if the deque is empty.
D.delete_last()     : Remove and return the last element from deque D; an error occurs if the deque is empty.

accessors:
D.first()     : Return (but do not remove) the first element of deque D; an error occurs if the deque is empty.
D.last()      : Return (but do not remove) the last element of deque D;an error occurs if the deque is empty.
D.is empty( ) : Return True if deque D does not contain any elements.
len(D)        : Return the number of elements in deque D; in Python,we implement this with the special method len .
 
Implementing a Deque with a Circular Array:

 
 
 
 
 
 
 
 
