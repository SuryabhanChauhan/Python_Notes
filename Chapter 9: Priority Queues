
Queue ADT works on FIFo principle but In practice, there are many applications in which a queue-like structure is used to manage 
objects that must be processed in some way, but for which the first-in, first-out policy does not suffice.
Like: Air traffic control where instead of FIFO landing of plan depend upon many factors like, reaming fuel, emergency, waiting time,
distance from runway etc.

Priority queue is a collection of prioritized elements that allows arbitrary element insertion, and allows the removal of the element 
that has first priority.
When an element is added to a priority queue, the user designates its priority by providing an associated key. The element with the 
minimum key will be the next to be removed from the queue.

The Priority Queue ADT: 

Methods supported by P Queue:
 
P.add(k, v)   : Insert an item with key k and value v into priority queue P.
P.min()       : Return a tuple, (k,v), representing the key and value of an item in priority queue P with minimum key 
                (but do not remove the item); an error occurs if the priority queue is empty.
P.remove_min(): Remove an item with minimum key from priority queue P, and return a tuple, (k,v), 
                representing the key and value of the removed item; an error occurs if the priority queue is empty.
P.is_empty()  : Return True if priority queue P does not contain any items.
len(P)        : Return the number of items in priority queue P.

A priority queue may have multiple entries with equivalent keys, in which case methods min and remove min may report an arbitrary choice 
of item having minimum key.

Initial model we will consider that key remains fixed

 Implementing a Priority Queue 

First we create a base class which will have a item composite for the key value pair.

Then we will create another class for the actual implementation.

Implementation using unsorted list:

In our first concrete implementation of a priority queue, we store entries within an unsorted list.
For internal storage, key-value pairs are represented as composites, using instances of the inherited Item class.

These items are stored within a PositionalList, identified as the data member of our class. We assume that the positional list is 
implemented with a doubly-linked list,x` so that all operations of that ADT execute in O(1) time.

Because the items are not sorted, we must inspect all entries to find one with a minimum key.
Due to the loop for finding the minimum key, both min and remove_min methods run in O(n) time, where n is the
number of entries in the priority queue


Implementation using sorted list:

An alternative implementation of a priority queue uses a positional list, yet maintaining entries sorted by nondecreasing keys. 
This ensures that the first element of the list is an entry with the smallest key.

The implementation of min and remove_min are rather straightforward given knowledge that the first element of a list has a minimum key.

This benefit comes at a cost, however, for method add now requires that we scan the list to find the appropriate position to insert the
new item. Our implementation starts at the end of the list, walking backward until the new key is smaller than an existing item; 
in the worst case, it progresses until reaching the front of the list. Therefore, the add method takes O(n)

Operation   Unsorted List   Sorted List
len         O(1)            O(1)
is_empty    O(1)            O(1)
add         O(1)            O(n)
min         O(n)            O(1)
remove_min  O(n)            O(1)


 HEAPS 

When using an unsorted list to store entries, we can perform insertions in O(1) time, but finding or removing an element with
minimum key requires an O(n)-time loop through the entire collection. In contrast, if using a sorted list, we can trivially find or 
remove the minimum element in O(1) time, but adding a new element to the queue may require O(n) time to restore the
sorted order.
In this section, we provide a more efficient realization of a priority queue using a data structure called a binary heap. 
This data structure allows us to perform both insertions and removals in logarithmic time, which is a significant improvement
over the list-based implementations.

The Heap Data Structure:

A heap is a Binary tree T which satisfy two additional properties:

1. Heap-Order Property: In a heap T, for every position p other than the root,the key stored at p is greater than or equal to the key 
stored at p’s parent.

As a consequence of the heap-order property, the keys encountered on a path from the root to a leaf of T are in nondecreasing order. 
Also, a minimum key is always stored at the root of T. This makes it easy to locate such an item when min or remove_min is called.

2. Complete Binary Tree Property: A heap T with height h is a complete binary tree if levels 0,1,2, . . . ,h−1 of T have the maximum 
number of nodes possible (namely, level i has 2i nodes, for 0 ≤ i ≤ h−1) and the remaining nodes at level h reside in the leftmost 
possible positions at that level.

A heap T storing n entries has height h = floor(log n)

Justification: From the fact that T is complete, we know that the number of nodes in levels 0 through h−1 of T is precisely 
 1+2+4+· · ·+2h−1 = 2**h−1
and that the number of nodes in level h is at least 1 and at most 2h. Therefore
n ≥ 2**h−1+1 = 2**h and n ≤ 2**h−1+2**h = 2**(h+1)−1.

By taking the logarithm of both sides of inequality:
h≤log n and log(n+1)−1 ≤ h.

Since h is an integer, these two inequalities imply that h = floor(log n)

Implementing a Priority Queue with a Heap:

Adding an Item to the Heap:

We store the pair (k,v) as an item at a new node of the tree. To maintain the complete binary tree property, that new node should be 
placed at a position p just beyond the rightmost node at the bottom level of the tree, or as the leftmost position of a new level, 
if the bottom level is already full (or if the heap is empty).

Up-Heap Bubbling After an Insertion:

After this action, the tree T is complete, but it may violate the heap-order property. Hence, unless position p is the root of T 
(that is, the priority queue was empty before the insertion), we compare the key at position p to that of p’s parent, which
we denote as q. If key kp ≥kq, the heap-order property is satisfied and the algorithm terminates. If instead kp < kq, then we need to 
restore the heap-order property, which can be locally achieved by swapping the entries stored at positions p and q.
 This swap causes the new item to move up one level. Again, the heap-order property may be violated, so we repeat the process, going up
in T until no violation of the heap-order property occurs.

The upward movement of the newly inserted entry by means of swaps is conventionally called up-heap bubbling. 
A swap either resolves the violation of the heap-order property or propagates it one level up in the heap. In the worst case, upheap
bubbling causes the new entry to move all the way up to the root of heap T.
Thus, in the worst case, the number of swaps performed in the execution of method add is equal to the height of T i.e. floor(long n).

Removing the Item with Minimum Key:

We know that the smallest key is stored at the root but we can not simply delete the node because this would leave two disconnected 
subtrees.
Instead, we ensure that the shape of the heap respects the complete binary tree property by deleting the leaf at the last position p 
of T, defined as the rightmost position at the bottommost level of the tree and swap the item of that node with the root node.

Down-Heap Bubbling After a Removal:

However, for even though T is now complete, it likely violates the heap-order property.
f T has only one node (the root), then the heap-order property is trivially satisfied and the algorithm terminates. 
Otherwise, we distinguish two cases, where p initially denotes the root of T:

• If p has no right child, let c be the left child of p.
• Otherwise (p has both children), let c be a child of p with minimal key.

If key kp ≤ kc, the heap-order property is satisfied and the algorithm terminates. If instead kp >kc, then we need to restore the
heap-order property. This can be locally achieved by swapping the entries stored at p and c.

It is worth noting that when p has two children, we intentionally consider the smaller key of the two children. Not only is the 
key of c smaller than that of p, it is at least as small as the key at c’s sibling. This ensures that the heap-order property is
locally restored when that smaller key is promoted above the key that had been at p and that at c’s sibling.

this sorting also can go upto height of the tree, Thus, the number of swaps performed in the execution of method
remove min is, in the worst case, equal to the height of heap T, that is, it is floor(log n)


Array-Based Representation of a Complete Binary Tree:

The array-based representation of a binary tree (Section 8.3.2) is especially suitable for a complete binary tree T.
We recall that in this implementation, the elements of T are stored in an array-based list A such that the element at position p in T 
is stored in A with index equal to the level number f (p) of p, defined as follows:
• If p is the root of T, then f (p) = 0.
• If p is the left child of position q, then f (p) = 2 f (q)+1.
• If p is the right child of position q, then f (p) = 2 f (q)+2.
• If p is the parent of q, then f(p) = f(q)//2

Implementing a priority queue using an array-based heap representation allows us to avoid some complexities of a node-based tree
structure. In particular, the add and remove min operations of a priority queue both depend on locating the last 
index of a heap of size n. With the array-based representation, the last position is at index n−1 of the array. 
Locating the last position of a complete binary tree implemented with a linked structure requires more effort.

if size of the tree is not know in the advance array will be dynamiclly resized.

The space usage of such an array-based representation of a complete binary tree with n nodes is O(n), and the time bounds of methods 
for adding or removing elements become amortized.

Python Heap Implementation : #see the code

Operation            Running Time
len(P), P.is_empty() O(1)
P.min()              O(1)
P.add()              O(log n)∗
P.remove_min()       O(log n)∗
The space requirement is O(n)

∗amortized, if array-based



heap data structure is a very efficient realization of the priority queue ADT, independent of whether the heap is implemented with a 
linked structure or an array. The heap-based implementation achieves fast running times for both insertion and removal, unlike the 
implementations that were based on using an unsorted or sorted list.

 Bottom-Up Heap Construction 

If we start with an initially empty heap, n successive calls to the add operation will
run in O(nlogn) time in the worst case. However, if all n key-value pairs to be
stored in the heap are given in advance, such as during the first phase of the heapsort
algorithm, there is an alternative bottom-up construction method that runs in
O(n) time.

#see the code

Proposition 9.3: Bottom-up construction of a heap with n entries takes O(n) time, assuming two keys can be compared in O(1) time.

 Python’s heapq Module 
Python’s standard distribution includes a heapq module that provides support for heap-based priority queues. 
That module does not provide any priority queue class; instead it provides functions that allow a standard Python list to be managed as 
a heap. 
Its model is essentially the same as our own, with n elements stored in list cells L[0] through L[n−1], based on the level-numbering 
indices with the smallest element at the root in L[0].

We note that heapq does not separately manage associated values; elements serve as their own key.

The heapq module supports the following functions, all of which presume that existing list L satisfies the heap-order property 
prior to the call:
heappush(L, e)   : Push element e onto list L and restore the heap-order property: O(logn) time.
heappop(L)       : Pop and return the element with smallest value from list L, and reestablish the heap-order property: O(logn) time.
heappushpop(L, e): Push element e on list L and then pop and return the smallest item: The time is O(logn), but it is slightly more
                   efficient than separate calls to push and pop because the size of the list never changes. If the newly pushed element
                   becomes the smallest, it is immediately returned. Otherwise, the new element takes the place of the popped
                   element at the root and a down-heap is performed.
heapreplace(L, e): Similar to heappushpop, but equivalent to the pop being performed before the push (in other words, the new element 
                   cannot be returned as the smallest). Again, the time is O(logn), but it is more efficient that two separate operations.

The module supports additional functions that operate on sequences that do not previously satisfy the heap-order property.

heapify(L)            : Transform unordered list to satisfy the heap-order property. This executes in O(n) time by using the bottom-up
                        construction algorithm.
nlargest(k, iterable) : Produce a list of the k largest values from a given iterable. This can be implemented to run in O(n+k logn) time,
                        where we use n to denote the length of the iterable.
nsmallest(k, iterable): Produce a list of the k smallest values from a given iterable. This can be implemented to run in O(n+k log n)
                        time, using similar technique as with nlargest.

 Sorting with a Priority Queue 
insertion sort and  selection sort below are implemented with the normal priority Quue not with the Heap priority Queue

def pq_sort(C):
    """Sort a collection of elements stored in a positional list."""
    n = len(C)
    P = PriorityQueue()
    for j in range(n):
        element = C.delete(C.first())
        P.add(element, element)  # use element as key and value
    for j in range(n):
        (k, v) = P.remove_min()
        C.add_last(v)  # store smallest remaining element in C

Selection-Sort: The above code
If we implement P with an unsorted list, then Phase 1 of pq sort takes O(n) time.
In Phase 2, the running time of each remove min operation is proportional to the size of P. Thus, the bottleneck computation
is the repeated “selection” of the minimum element in Phase 2. For this reason, this algorithm is better known as selection-sort.
Thus, the first operation takes time O(n), the second one takes time O(n−1), and so on.

complexity of the program will be O(n**2)

Insertion-Sort: 
If we implement the priority queue P using a sorted list, then we improve the running time of Phase 2 to O(n),
but Phase 1 becomes the bottleneck for the running time, since, in the worst case, each add operation takes time proportional to the 
current size of P.

worst-case O(n2)
best-case running time of O(n)


Heap Sort:

During Phase 1, the ith add operation takes O(log i) time, since the heap has i entries after the operation is performed. 
Therefore this phase takes O(nlogn) time. (It could be improved to O(n) with the bottom-up heap construction.)

Second phase also runs in O(nlogn) 

so the entire priority-queue sorting algorithm runs in O(nlog n) time when we use a heap to implement the priority queue. 
This sorting algorithm is better known as heap-sort


Implementing Heap-Sort In-Place:

If the collection C to be sorted is implemented by means of an array-based sequence, most notably as a Python list, we can speed up
heap-sort and reduce its space requirement by a constant factor using a portion of the list itself to store the heap, 
thus avoiding the use of an auxiliary heap data structure.

 Adaptable Priority Queues 

The methods of the priority queue ADT are sufficient for most basic applications of priority queues, such as sorting
Howevere there are situations in which additional methods would be useful, as shown by the scenarios:
  -new operation, remove, that removes an arbitrary entry.(someone become tired of waiting and decide to leave ahead of the their turn)
  -replace the key of an existing entry with a new key (Another standby passenger finds her gold frequent-flyer card)

Locators:
In order to implement methods update and remove efficiently, we need a mechanism for finding a user’s element within a priority queue 
that avoids performing a linear search through the entire collection.
To support our goal, when a new element is added to the priority queue, we return a special object known as a locator to the caller. 
We then require the user to provide an appropriate locator as a parameter when invoking the update or remove method, as follows, 
for a priority queue P:

P.update(loc, k, v) : Replace key and value for the item identified by locator loc.
P.remove(loc)       : Remove the item identified by locator loc from the priority queue and return its (key,value) pair.

To implement a Locator class, we will extend the existing Item composite to add an additional field designating the current index of 
the element within the array-based representation of our heap,




